# 1) CLEAN UP
docker compose down -v
docker container prune -f
docker volume prune -f
Remove-Item -Recurse -Force data* *.bin *.txt -ErrorAction SilentlyContinue
Get-ChildItem -Filter 'store-*.db' | Remove-Item -Force -ErrorAction SilentlyContinue

# 2) BUILD & DEPLOY 5‑NODE CLUSTER
docker compose build --pull
docker compose up -d
docker compose ps

# 3) HAPPY‑PATH 3‑of‑5
$P="server1:50051,server2:50052,server3:50053,server4:50054,server5:50055"
$m=3; $n=5
"Demo $((Get-Date))" | Set-Content demo.txt
docker compose cp demo.txt server1:/demo.txt

docker compose exec server1 /bin/client `
  -mode disperse -file /demo.txt -id demo-3of5 `
  -peers $P -m $m -n $n

docker compose exec server2 /bin/client `
  -mode retrieve -file ok.txt -id demo-3of5 `
  -peers $P -m $m -n $n

Compare-Object (Get-Content demo.txt) (Get-Content ok.txt)

# 4) AVAILABILITY (≤ f=2)
docker compose stop server2,server4
docker compose exec server3 /bin/client `
  -mode retrieve -file avail.txt -id demo-3of5 `
  -peers $P -m $m -n $n

Compare-Object (Get-Content demo.txt) (Get-Content avail.txt)
docker compose start server2,server4

# 5) INTEGRITY‑FAILURE (> f corruptions)
"Integrity $((Get-Date))" | Set-Content demoB.txt
docker compose cp demoB.txt server1:/demoB.txt

docker compose exec server1 /bin/client `
  -mode disperse -file /demoB.txt -id demoB-3of5 `
  -peers $P -m $m -n $n

# Corrupt shards 0–2 on servers 1–3
foreach ($idx in 0,1,2) {
  foreach ($s in 1,2,3) {
    $ctr="distributed_object_store-server${s}-1"
    $rem="/data/fragments/demoB-3of5/$idx.bin"
    $tmp="tmp_${idx}_${s}.bin"
    docker cp "${ctr}:${rem}" $tmp
    $b=[IO.File]::ReadAllBytes($tmp); $b[0]=$b[0]-bxor 0xFF
    [IO.File]::WriteAllBytes($tmp,$b)
    docker cp $tmp "${ctr}:${rem}"
    Remove-Item $tmp
  }
}

docker compose stop server4,server5
docker compose exec server1 /bin/client `
  -mode retrieve -file hacked.txt -id demoB-3of5 `
  -peers $P -m $m -n $n

# Expect: “cannot decode”
docker compose start server4,server5

# 6) BUILD & DEPLOY 6‑NODE CLUSTER (m=4,n=6)
#   - update configs, add server6
docker compose down -v
docker compose build --pull
docker compose up -d
docker compose ps

# 7) HAPPY‑PATH 4‑of‑6
$P6="server1:50051,…,server6:50056"
$m=4; $n=6
"Demo46 $((Get-Date))" | Set-Content demo46.txt
docker compose cp demo46.txt server1:/demo46.txt

docker compose exec server1 /bin/client `
  -mode disperse -file /demo46.txt -id demo-4of6 `
  -peers $P6 -m $m -n $n

docker compose stop server5,server6
docker compose exec server2 /bin/client `
  -mode retrieve -file demo46_out.txt -id demo-4of6 `
  -peers $P6 -m $m -n $n

Compare-Object (Get-Content demo46.txt) (Get-Content demo46_out.txt)
docker compose start server5,server6

# 8) METRICS & MONITORING VALIDATION
# (see section 8 below)

# 9) SNAPSHOT & GC
docker compose exec server1 /bin/server -config /etc/avid/config.yaml -snapshot /snapshots
# copy out snapshots, inspect…

# TTL/GC test: set ttl=1s, disperse, wait, SIGUSR1, verify fragments removed

# 10) ENV‑VAR OVERRIDES
docker compose down -v
docker compose up -d
docker compose exec server1 bash -lc '
  export AVID_FP_ERASURE_DATA=2 AVID_FP_ERASURE_TOTAL=4
  exec /bin/server -config /etc/avid/config.yaml
'
# Test 2-of-4 write/read as above

# 11) ROLLING‑UPGRADE (ZERO‑DOWNTIME)
docker compose build --pull --build-arg TAG=canary
docker compose up -d --no-deps --build server3
docker compose exec server3 /bin/client -mode retrieve -file test.txt -id demo-3of5 -peers $P -m $m -n $n
# repeat for server4→server5→server1→server2

# 12) TEARDOWN
docker compose down -v
docker container prune -f
docker volume prune -f
Remove-Item -Recurse -Force data* *.bin *.txt, store-*.db
