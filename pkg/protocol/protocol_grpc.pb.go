// pkg/protocol/protocol.proto
// Author: Manoj Myneni
// UIC, Spring 2025
//
// gRPC definitions for the AVID-FP protocol: Disperse, Echo, Ready, and Retrieve.
// These RPCs allow clients and servers to coordinate erasure-coded fragment dispersal
// and integrity-verified retrieval in a fault-tolerant distributed object store.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: pkg/protocol/protocol.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Dispersal_Disperse_FullMethodName = "/protocol.Dispersal/Disperse"
	Dispersal_Echo_FullMethodName     = "/protocol.Dispersal/Echo"
	Dispersal_Ready_FullMethodName    = "/protocol.Dispersal/Ready"
	Dispersal_Retrieve_FullMethodName = "/protocol.Dispersal/Retrieve"
)

// DispersalClient is the client API for Dispersal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DispersalClient interface {
	Disperse(ctx context.Context, in *DisperseRequest, opts ...grpc.CallOption) (*DisperseResponse, error)
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	Ready(ctx context.Context, in *ReadyRequest, opts ...grpc.CallOption) (*ReadyResponse, error)
	Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveResponse, error)
}

type dispersalClient struct {
	cc grpc.ClientConnInterface
}

func NewDispersalClient(cc grpc.ClientConnInterface) DispersalClient {
	return &dispersalClient{cc}
}

func (c *dispersalClient) Disperse(ctx context.Context, in *DisperseRequest, opts ...grpc.CallOption) (*DisperseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisperseResponse)
	err := c.cc.Invoke(ctx, Dispersal_Disperse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispersalClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, Dispersal_Echo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispersalClient) Ready(ctx context.Context, in *ReadyRequest, opts ...grpc.CallOption) (*ReadyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadyResponse)
	err := c.cc.Invoke(ctx, Dispersal_Ready_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispersalClient) Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetrieveResponse)
	err := c.cc.Invoke(ctx, Dispersal_Retrieve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispersalServer is the server API for Dispersal service.
// All implementations must embed UnimplementedDispersalServer
// for forward compatibility.
type DispersalServer interface {
	Disperse(context.Context, *DisperseRequest) (*DisperseResponse, error)
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	Ready(context.Context, *ReadyRequest) (*ReadyResponse, error)
	Retrieve(context.Context, *RetrieveRequest) (*RetrieveResponse, error)
	mustEmbedUnimplementedDispersalServer()
}

// UnimplementedDispersalServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDispersalServer struct{}

func (UnimplementedDispersalServer) Disperse(context.Context, *DisperseRequest) (*DisperseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disperse not implemented")
}
func (UnimplementedDispersalServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedDispersalServer) Ready(context.Context, *ReadyRequest) (*ReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ready not implemented")
}
func (UnimplementedDispersalServer) Retrieve(context.Context, *RetrieveRequest) (*RetrieveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedDispersalServer) mustEmbedUnimplementedDispersalServer() {}
func (UnimplementedDispersalServer) testEmbeddedByValue()                   {}

// UnsafeDispersalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DispersalServer will
// result in compilation errors.
type UnsafeDispersalServer interface {
	mustEmbedUnimplementedDispersalServer()
}

func RegisterDispersalServer(s grpc.ServiceRegistrar, srv DispersalServer) {
	// If the following call pancis, it indicates UnimplementedDispersalServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Dispersal_ServiceDesc, srv)
}

func _Dispersal_Disperse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisperseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispersalServer).Disperse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dispersal_Disperse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispersalServer).Disperse(ctx, req.(*DisperseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispersal_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispersalServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dispersal_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispersalServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispersal_Ready_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispersalServer).Ready(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dispersal_Ready_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispersalServer).Ready(ctx, req.(*ReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispersal_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispersalServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dispersal_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispersalServer).Retrieve(ctx, req.(*RetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dispersal_ServiceDesc is the grpc.ServiceDesc for Dispersal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dispersal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Dispersal",
	HandlerType: (*DispersalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Disperse",
			Handler:    _Dispersal_Disperse_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _Dispersal_Echo_Handler,
		},
		{
			MethodName: "Ready",
			Handler:    _Dispersal_Ready_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _Dispersal_Retrieve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/protocol/protocol.proto",
}
